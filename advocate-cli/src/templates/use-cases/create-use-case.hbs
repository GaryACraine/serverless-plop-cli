// import * as event from '@events/{{camelCase name}}';
import { {{pascalCase name}}Dto } from '@dto/{{kebabCase name}}';
import { getISOString, logger, schemaValidator } from '@shared/index';
import { schema } from '@schemas/{{kebabCase useCaseSchemaName}}';
import { v4 as uuid } from 'uuid';

// primary adapter --> (use case) --> secondary adapter(s)

/**
 * Add description here
 * Input: ?
 * Output: ?
 *
 * Primary course:
 *
 *  1. step one
 *  2. step two
 */
export async function {{camelCase name}}UseCase(
  {{camelCase useCaseSchemaName}}: {{pascalCase name}}Dto
): Promise<{{pascalCase name}}Dto> {
  const createdDate = getISOString();

  const {{camelCase useCaseSchemaName}}Dto: {{pascalCase name}}Dto = {
     id: uuid(),
     created: createdDate,
      ...{{camelCase useCaseSchemaName}},
  }

  schemaValidator(schema, {{camelCase useCaseSchemaName}});

  // TODO - import and call secondary adapters

  // TODO publish the correct event
  // await publishEvent(
  //  {{camelCase useCaseSchemaName}},
  //  event.eventName,
  //  event.eventSource,
  //  event.eventVersion,
  //  createdDate
  // );
  logger.info(
    `{{camelCase useCaseSchemaName}} created event published`
  );

  return {{camelCase useCaseSchemaName}}Dto;
}
